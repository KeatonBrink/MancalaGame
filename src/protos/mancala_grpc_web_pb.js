/**
 * @fileoverview gRPC-Web generated client stub for mancala
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: mancala.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.mancala = require('./mancala_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.mancala.MancalaServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.mancala.MancalaServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.mancala.HandshakeRequest,
 *   !proto.mancala.HandshakeResponse>}
 */
const methodDescriptor_MancalaService_GameHandshake = new grpc.web.MethodDescriptor(
  '/mancala.MancalaService/GameHandshake',
  grpc.web.MethodType.UNARY,
  proto.mancala.HandshakeRequest,
  proto.mancala.HandshakeResponse,
  /**
   * @param {!proto.mancala.HandshakeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.mancala.HandshakeResponse.deserializeBinary
);


/**
 * @param {!proto.mancala.HandshakeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mancala.HandshakeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mancala.HandshakeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mancala.MancalaServiceClient.prototype.gameHandshake =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mancala.MancalaService/GameHandshake',
      request,
      metadata || {},
      methodDescriptor_MancalaService_GameHandshake,
      callback);
};


/**
 * @param {!proto.mancala.HandshakeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mancala.HandshakeResponse>}
 *     Promise that resolves to the response
 */
proto.mancala.MancalaServicePromiseClient.prototype.gameHandshake =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mancala.MancalaService/GameHandshake',
      request,
      metadata || {},
      methodDescriptor_MancalaService_GameHandshake);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.mancala.MoveRequest,
 *   !proto.mancala.MoveResponse>}
 */
const methodDescriptor_MancalaService_MakeMove = new grpc.web.MethodDescriptor(
  '/mancala.MancalaService/MakeMove',
  grpc.web.MethodType.UNARY,
  proto.mancala.MoveRequest,
  proto.mancala.MoveResponse,
  /**
   * @param {!proto.mancala.MoveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.mancala.MoveResponse.deserializeBinary
);


/**
 * @param {!proto.mancala.MoveRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mancala.MoveResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mancala.MoveResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mancala.MancalaServiceClient.prototype.makeMove =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mancala.MancalaService/MakeMove',
      request,
      metadata || {},
      methodDescriptor_MancalaService_MakeMove,
      callback);
};


/**
 * @param {!proto.mancala.MoveRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mancala.MoveResponse>}
 *     Promise that resolves to the response
 */
proto.mancala.MancalaServicePromiseClient.prototype.makeMove =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mancala.MancalaService/MakeMove',
      request,
      metadata || {},
      methodDescriptor_MancalaService_MakeMove);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.mancala.UpdateRequest,
 *   !proto.mancala.UpdateResponse>}
 */
const methodDescriptor_MancalaService_RequestUpdate = new grpc.web.MethodDescriptor(
  '/mancala.MancalaService/RequestUpdate',
  grpc.web.MethodType.UNARY,
  proto.mancala.UpdateRequest,
  proto.mancala.UpdateResponse,
  /**
   * @param {!proto.mancala.UpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.mancala.UpdateResponse.deserializeBinary
);


/**
 * @param {!proto.mancala.UpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.mancala.UpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.mancala.UpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.mancala.MancalaServiceClient.prototype.requestUpdate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/mancala.MancalaService/RequestUpdate',
      request,
      metadata || {},
      methodDescriptor_MancalaService_RequestUpdate,
      callback);
};


/**
 * @param {!proto.mancala.UpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.mancala.UpdateResponse>}
 *     Promise that resolves to the response
 */
proto.mancala.MancalaServicePromiseClient.prototype.requestUpdate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/mancala.MancalaService/RequestUpdate',
      request,
      metadata || {},
      methodDescriptor_MancalaService_RequestUpdate);
};


module.exports = proto.mancala;

